{
  "basePath": "/am",
  "definitions": {
    "Empty": {
      "title": "Empty Schema",
      "type": "object"
    },
    "Error": {
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "title": "Error Schema",
      "type": "object"
    }
  },
  "host": "api.arcimoto.com",
  "info": {
    "description": "Private endpoint for key authority delegation and assignment. Restricted to manufacturing and ERP integration.",
    "title": "AuthorityManager",
    "version": "2021-06-17T15:45:52Z"
  },
  "paths": {
    "/v1/authorities": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "include_vin",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Headers": {
                "type": "string"
              },
              "Access-Control-Allow-Methods": {
                "type": "string"
              },
              "Access-Control-Allow-Origin": {
                "type": "string"
              },
              "X-Requested-With": {
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "401": {
            "description": "401 response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "ArcimotoAuthorityUserPool": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "contentHandling": "CONVERT_TO_TEXT",
          "httpMethod": "POST",
          "passthroughBehavior": "when_no_templates",
          "requestParameters": {
            "integration.request.querystring.include_vin": "method.request.querystring.include_vin"
          },
          "requestTemplates": {
            "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
          },
          "responses": {
            "(Unauthorized)": {
              "statusCode": "401"
            },
            "default": {
              "statusCode": "200"
            }
          },
          "type": "aws",
          "uri": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:511596272857:function:${stageVariables.func_list_authorities}/invocations"
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "400 response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "401 response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "404 response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "ArcimotoAuthorityUserPool": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "contentHandling": "CONVERT_TO_TEXT",
          "httpMethod": "POST",
          "passthroughBehavior": "when_no_templates",
          "requestTemplates": {
            "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"description\": \"$input.path('$.description')\",\n\"parent_authority_id\": #if($input.path('$.parent_authority_id') == \"\")1#else$input.path('$.parent_authority_id')#end,\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
          },
          "responses": {
            "(.*Input validation failed.*)": {
              "statusCode": "400"
            },
            "(Invalid.*)": {
              "statusCode": "404"
            },
            "(Unauthorized)": {
              "statusCode": "401"
            },
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "statusCode": "200"
            }
          },
          "type": "aws",
          "uri": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:511596272857:function:${stageVariables.func_create_authority}/invocations"
        }
      }
    },
    "/v1/authorities/{id}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "400 response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "401 response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "404 response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "ArcimotoAuthorityUserPool": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "contentHandling": "CONVERT_TO_TEXT",
          "httpMethod": "POST",
          "passthroughBehavior": "when_no_templates",
          "requestTemplates": {
            "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"atoms\":[\n\t{\n\t\t\"lambda\":\"delete_authority\",\n\t\t\"output\":{\n\t\t\t\"vin\":\"vin\"\n\t\t}\n\t},\n\t{\n\t\t\"lambda\":\"update_shadow_document\"\n\t}\n],\n\"input\":{\n\t\"id\":$input.params('id')\n},\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
          },
          "responses": {
            "(.*Input validation failed.*)": {
              "statusCode": "400"
            },
            "(Invalid.*)": {
              "statusCode": "404"
            },
            "(Unauthorized)": {
              "statusCode": "401"
            },
            "default": {
              "statusCode": "200"
            }
          },
          "type": "aws",
          "uri": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:511596272857:function:${stageVariables.func_step_wrapper}/invocations"
        }
      },
      "get": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "400 response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "401 response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "404 response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "ArcimotoAuthorityUserPool": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "contentHandling": "CONVERT_TO_TEXT",
          "httpMethod": "POST",
          "passthroughBehavior": "when_no_templates",
          "requestTemplates": {
            "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"id\" : $input.params('id'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
          },
          "responses": {
            "(.*Input validation failed.*)": {
              "statusCode": "400"
            },
            "(Invalid.*)": {
              "statusCode": "404"
            },
            "(Unauthorized)": {
              "statusCode": "401"
            },
            "default": {
              "statusCode": "200"
            }
          },
          "type": "aws",
          "uri": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:511596272857:function:${stageVariables.func_get_authority}/invocations"
        }
      }
    },
    "/v1/authorities/{id}/vehicles/{vin}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "vin",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "400 response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "401 response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "403 response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "404 response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "ArcimotoAuthorityUserPool": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "contentHandling": "CONVERT_TO_TEXT",
          "httpMethod": "POST",
          "passthroughBehavior": "when_no_templates",
          "requestTemplates": {
            "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"atoms\":[\n\t{\n\t\t\"lambda\":\"unprovision_vehicle_authority\",\n\t\t\"reverse\":\"provision_vehicle_authority\"\n\t},\n\t{\n\t\t\"lambda\":\"update_shadow_document\",\n\t\t\"reverse\":\"update_shadow_document\"\n\t}\n],\n\"input\":{\n\t\"id\":$input.params('id'),\n\t\"vin\":\"$input.params('vin')\"\n\t},\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
          },
          "responses": {
            "(.*Input validation failed.*)": {
              "statusCode": "400"
            },
            "(Authority does not control VIN)|(Arcimoto authority cannot be removed)": {
              "statusCode": "403"
            },
            "(No vehicle found.*)|(.*does not exist.*)|(Invalid.*)": {
              "statusCode": "404"
            },
            "(Unauthorized)": {
              "statusCode": "401"
            },
            "default": {
              "statusCode": "200"
            }
          },
          "type": "aws",
          "uri": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:511596272857:function:${stageVariables.func_step_wrapper}/invocations"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "vin",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "400 response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "401 response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "403 response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "404 response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "ArcimotoAuthorityUserPool": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "contentHandling": "CONVERT_TO_TEXT",
          "httpMethod": "POST",
          "passthroughBehavior": "when_no_templates",
          "requestTemplates": {
            "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"atoms\":[\n\t{\n\t\t\"lambda\":\"provision_vehicle_authority\",\n\t\t\"reverse\":\"unprovision_vehicle_authority\"\n\t},\n\t{\n\t\t\"lambda\":\"update_shadow_document\",\n\t\t\"reverse\":\"update_shadow_document\"\n\t}\n],\n\"input\":{\n\t\"id\":$input.params('id'),\n\t\"vin\":\"$input.params('vin')\"\n},\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
          },
          "responses": {
            "(.*Input validation failed.*)": {
              "statusCode": "400"
            },
            "(.*does not exist.*)|(Invalid.*)": {
              "statusCode": "404"
            },
            "(Authority does not control VIN)": {
              "statusCode": "403"
            },
            "(Unauthorized)": {
              "statusCode": "401"
            },
            "default": {
              "statusCode": "200"
            }
          },
          "type": "aws",
          "uri": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:511596272857:function:${stageVariables.func_step_wrapper}/invocations"
        }
      }
    },
    "/v1/vehicles": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "headers": {
              "Access-Control-Allow-Origin": {
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "401": {
            "description": "401 response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "ArcimotoAuthorityUserPool": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "contentHandling": "CONVERT_TO_TEXT",
          "httpMethod": "POST",
          "passthroughBehavior": "when_no_templates",
          "requestTemplates": {
            "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
          },
          "responses": {
            "(Unauthorized)": {
              "statusCode": "401"
            },
            "default": {
              "responseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "statusCode": "200"
            }
          },
          "type": "aws",
          "uri": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:511596272857:function:${stageVariables.func_list_vehicles}/invocations"
        }
      }
    },
    "/v1/vehicles/{vin}": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "vin",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "400 response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "401 response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "404 response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "ArcimotoAuthorityUserPool": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "contentHandling": "CONVERT_TO_TEXT",
          "httpMethod": "POST",
          "passthroughBehavior": "when_no_templates",
          "requestTemplates": {
            "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"vin\":\"$input.params('vin')\",\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
          },
          "responses": {
            "(.*Input validation failed.*)": {
              "statusCode": "400"
            },
            "(.*does not exist)|(Unable to get factory pin.*)": {
              "statusCode": "404"
            },
            "(Unauthorized)": {
              "statusCode": "401"
            },
            "default": {
              "statusCode": "200"
            }
          },
          "type": "aws",
          "uri": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:511596272857:function:${stageVariables.func_authkey_vehicle_get}/invocations"
        }
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "vin",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "400 response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "401 response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "403 response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "ArcimotoAuthorityUserPool": []
          }
        ],
        "x-amazon-apigateway-integration": {
          "contentHandling": "CONVERT_TO_TEXT",
          "httpMethod": "POST",
          "passthroughBehavior": "when_no_templates",
          "requestTemplates": {
            "application/json": "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\" : $input.json('$'),\n\"model_release_id\": $input.json('model_release_id'),\n\"atoms\":[\n    {\n        \"lambda\": \"provision_iot\",\n        \"reverse\": \"unprovision_iot\"\n    },\n    {\n        \"lambda\": \"provision_iot_certificate\",\n        \"reverse\": \"unprovision_iot_certificate\",\n        \"output\":{\n            \"certificate_pem\": \"certificate\",\n            \"certificate_key_pem\": \"private_key\"\n        }\n    },\n    {\n        \"lambda\": \"provision_vehicle_authority\",\n        \"reverse\": \"unprovision_vehicle_arcimoto_authority\"\n    },\n    {\n    \t\"lambda\": \"provision_vehicle_telemetry\",\n    \t\"reverse\": \"unprovision_vehicle_telemetry\"\n    },\n    {\n    \t\"lambda\": \"add_vehicle_to_group\",\n    \t\"reverse\": \"remove_vehicle_from_arcimoto_group\"\n    },\n    {\n    \t\"lambda\": \"telemetry_points_get_defaults\",\n    \t\"output\":{\n            \"telemetry_points\": \"telemetry_points\"\n        }\n    },\n    {\n    \t\"lambda\": \"set_telemetry_points\"\n    },\n    {\n    \t\"lambda\": \"factory_pin_generate\",\n    \t\"output\":{\n            \"pin\": \"pin\"\n        }\n    },\n    {\n    \t\"lambda\": \"vehicles_options_set\"\n    },\n    {\n    \t\"lambda\": \"managed_session_mode_set\"\n    },\n    {\n        \"lambda\": \"update_shadow_document\",\n        \"reverse\": \"update_shadow_document\"\n    },\n    {\n    \t\"lambda\": \"provision_grafana_vehicle\"\n    },\n    {\n    \t\"lambda\": \"provision_grafana_overview\"\n    }\n],\n\"input\":{\n    \"vin\":\"$input.params('vin')\",\n    \"id\":${stageVariables.default_vehicles_vin_put_authority_id},\n    \"group_id\":${stageVariables.default_vehicles_vin_put_group_id},\n    \"options\": $input.json('$.options'),\n    \"managed_session_mode\": $input.json('$.managed_session_mode'),\n    \"model_release_id\": $input.json('$.model_release_id')\n},\n\"params\" : {\n#foreach($type in $allParams.keySet())\n    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n#end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n    #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\" : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\",\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\" : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\",\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\",\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\",\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\",\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\",\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"$context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\",\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"$context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\",\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" : \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\n    }\n}\n"
          },
          "responses": {
            "(.*Input validation failed.*)": {
              "statusCode": "400"
            },
            "(Unauthorized)": {
              "statusCode": "401"
            },
            "(Vehicles cannot be removed from reserved groups)": {
              "statusCode": "403"
            },
            "default": {
              "statusCode": "200"
            }
          },
          "type": "aws",
          "uri": "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:511596272857:function:${stageVariables.func_step_wrapper}/invocations"
        }
      }
    }
  },
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "ArcimotoAuthorityUserPool": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey",
      "x-amazon-apigateway-authorizer": {
        "providerARNs": [
          "arn:aws:cognito-idp:us-west-2:511596272857:userpool/us-west-2_3x5jXoVFD"
        ],
        "type": "cognito_user_pools"
      },
      "x-amazon-apigateway-authtype": "cognito_user_pools"
    }
  },
  "swagger": "2.0",
  "x-amazon-apigateway-gateway-responses": {
    "ACCESS_DENIED": {
      "responseTemplates": {
        "application/json": "{\"message\":$context.error.messageString}"
      },
      "statusCode": 403
    }
  }
}