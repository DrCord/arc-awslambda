import logging
import boto3

import arcimoto.runtime

logging.basicConfig()
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)


def recall_create(args=None, test_runner_user_admin=True):
    if args is None:
        args = {
            'title': 'TEST-GENERATED-RECALL',
            'description': 'Generated by unit tests',
            'nhtsa_number': '1234567890',
            'mfr_campaign_id': '0987654321',
            'country': 'USA',
            'safety_recall': True,
            'safety_description': 'Generated by unit test script'
        }
    recall = arcimoto.runtime.test_invoke_lambda('recall_create', args, test_runner_user_admin)
    return recall.get('id', None)


def recall_edit(args, test_runner_user_admin=True):
    return arcimoto.runtime.test_invoke_lambda('recall_edit', args, test_runner_user_admin)


def recall_delete(id, test_runner_user_admin=True):
    return arcimoto.runtime.test_invoke_lambda('recall_delete', {'recall_id': id}, test_runner_user_admin)


def recall_get(id, get_additional_data=False, test_runner_user_admin=True):
    return arcimoto.runtime.test_invoke_lambda('recall_get', {'recall_id': id, 'get_additional_data': get_additional_data}, test_runner_user_admin)


def remedy_create(args, test_runner_user_admin=True):
    response = arcimoto.runtime.test_invoke_lambda('remedy_create', args, test_runner_user_admin)
    return response.get('remedy_id', None)


def remedy_get(remedy_id, test_runner_user_admin=True):
    return arcimoto.runtime.test_invoke_lambda('remedy_get', {'remedy_id': remedy_id}, test_runner_user_admin)


def remedy_edit(args, test_runner_user_admin=True):
    return arcimoto.runtime.test_invoke_lambda('remedy_edit', args, test_runner_user_admin)


def remedy_delete(args, test_runner_user_admin=True):
    response = arcimoto.runtime.test_invoke_lambda('remedy_delete', args, test_runner_user_admin)
    return response.get('remedy_id', None)


def recall_add_vehicle(args, test_runner_user_admin=True):
    return arcimoto.runtime.test_invoke_lambda('recall_add_vehicle', args, test_runner_user_admin)


def recall_edit_vehicle(args, test_runner_user_admin=True):
    return arcimoto.runtime.test_invoke_lambda('recall_edit_vehicle', args, test_runner_user_admin)


def recall_service_vehicle(args, test_runner_user_admin=True):
    return arcimoto.runtime.test_invoke_lambda('recall_service_vehicle', args, test_runner_user_admin)


def recall_list_vehicle(args, test_runner_user_admin=True):
    response = arcimoto.runtime.test_invoke_lambda('recall_list_vehicle', args, test_runner_user_admin)
    return response.get('vehicle_recalls', None)


def recall_remove_vehicle(args, test_runner_user_admin=True):
    response = arcimoto.runtime.test_invoke_lambda('recall_remove_vehicle', args, test_runner_user_admin)
    return response.get('id', None)


def recall_get_vehicle(args, test_runner_user_admin=True):
    return arcimoto.runtime.test_invoke_lambda('recall_get_vehicle', args, test_runner_user_admin)


def recall_list(get_deleted_recalls=False, test_runner_user_admin=True):
    return arcimoto.runtime.test_invoke_lambda('recall_list', {'get_deleted_recalls': get_deleted_recalls}, test_runner_user_admin).get('recalls', None)


def remedy_list(test_runner_user_admin=True):
    response = arcimoto.runtime.test_invoke_lambda('remedy_list', {}, test_runner_user_admin)
    return response.get('remedies', None)


def recall_get_updated(id=None, first=False, last=False, test_runner_user_admin=True):
    args = {
        'id': id,
        'first': first,
        'last': last
    }
    return arcimoto.runtime.test_invoke_lambda('recall_get_updated', args, test_runner_user_admin)


def recall_set_updated(updated_timestamp=None, test_runner_user_admin=True):
    return arcimoto.runtime.test_invoke_lambda('recall_set_updated', {'updated': updated_timestamp}, test_runner_user_admin)


def recalls_get_highest_id():
    recalls = recall_list(True)
    return recalls[-1].get('recall_id', 0)


def vehicle_recalls_get_highest_id():
    vehicle_recalls_list = recall_list_vehicle({'get_deleted_recalls': True})
    return vehicle_recalls_list[-1].get('vehicle_recall_id', 0)
